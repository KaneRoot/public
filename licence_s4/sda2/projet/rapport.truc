a.

spécification ABP étend ORDT
	Sorte Abp
	Opérations:
		^ : → Abp
		i : Abp S → Abp
		s : Abp → Abp
		r : Abp Nat S → Abp
		éch : Abp Nat Nat → Abp
		n : Abp → Nat
		nf : Abp → Nat
		v : Abp Nat → S

	Préconditions:
		pré r(a, x, s) : x < n(a)
		pré éch(a, x, y) : x et y < n(a)
		pré v(a, x) : x < n(a)
	
	Axiomes:
		s(^) = ^
		s(i(a,s)) = a
		r(^, x, s) = ^
		r(i(a,s),x,s1) = a1 avec a1 init ^ pour i de 0 à n(a)-1
												si i==x alors i(a1, s1)
													sinon i(a1,v(a,i))
		n(^) = 0
		n(i(a,s)) = 1 + n(a)
		nf(^) = 0
		nf(i(a,s)) = n(i(a,s)) - arrondiborneinférieure(n(i(a,s))/2)
		v(i(a,s),x) = si n(i(a,s))-1 == x alors s
										  sinon v(a,x)
		éch(^,x,y) = ^
		éch(a,x,y) = r(r(a,x,v(a,y)),y,v(a,x))

fin spécification

b.

spécification ABPO0 étend ABP
	Opérations:
		po : Abp → bool
		ipo : Abp S → Abp
		mont : Abp Nat → Abp
		imont : Nat → Nat

	Préconditions:
		pré ipo(a,s) : po(a)
		pré mont(a,x) : n(a) > x
	Axiomes:
		po(^) = vrai
		po(i(a,s)) = s >= v(i(a,s),imont(n(i(a,s))-1)) et po(a)

		imont(x) = si x==0 alors 0 sinon si paire(x) alors arrondiborneinférieure((x-1)/2)
									 sinon arrondiborneinférieure(x/2)
		
		mont(a,x) = a1 avec init a1 = a
							tant que v(a1,x) < v(a1,imont(x))
								ech(a1,imont(x),x)
								x = imont(x)
							fin tant que
		
		ipo(^,s) = i(^,s)
		ipo(a,s) = si s < v(a,imont(n(a))) alors mont(i(a,s),n(i(a,s))-1)
											sinon i(a,s)
fin spécification

c.

spécification ABPO1 étend ABPO0
	Opérations:
		spo : Abp Nat → Abp
		desc : Abp Nat → Nat
		imin : Abp Nat → Nat

	Préconditions:
		pré imin(a,x) : # nonfeuille(a)
		pré desc(a,x) : x < n(a)

	Axiomes:
		desc(a,x) = a1 avec init a1 = a
							tant que v(a1,x) > v(a1,imin(a1,x))
								ech(a1,x,imin(a1,x))
								x = imin(a1,x)
							fin tant que
		imin(^,x) = x
		imin(i(a,s),x) = si n(i(a,s))-1 < 2*x+2 alors si n(i(a,s))-1 < 2*x+1 alors x sinon (2*x)+1 fsi
												sinon si v(i(a,s),2*x+1) < v(i(a,s),2*x+2) alors 2*x+1 sinon 2*x+2 fsi fsi

		spo(^,x) = ^
		spo(a,x) = si x >= n(a) alors a sinon avec a = s(ech(a,x,n(a)-1))
													si v(a,x) < v(a,imont(x)) alors mont(a,x)
													 sinon si v(a,x) > v(a,imin(a,x)) alors desc(a,x)

		Remarque, avec ma version des spécifications de mont et desc qui ne modifient l'arbre que s'il y a besoin, on aurait pu écrire spo de cette manière :
		spo(a,x) = si x >= n(a) alors a sinon desc(mont(s(ech(a,x,n(a)-1)),x),x)

fin spécification

e.

Démonstration par récurrence :
Au rang 0 : n = 0 : bornesupérieure(0/2) = 0 : pas de feuilles.
Au rang n = 1 : bornesupérieure(1/2) = 1 : une feuille, il n'y a qu'un nœud donc c'est une feuille. La relation est vraie au rang n.
Au rang n + 1 : bornesupérieure(n+1/2) soit n=1 alors : bornesupérieure(1+1/2) = 1, il y a un nœud père et un nœud feuille. Cela est vrai au rang n+1 donc la relation est vraie.


La hauteur d'un arbre à n éléments est égale à x avec x tel que : 2^x <= n < 2^(x+1)
En code :
int hauteur(Abp a)
{
	if(n(a) == 0) return 0;
	int i = 1, x = 1;
	while(x < n(a)) 
	{
		x = x*2; 
		i++;
	}
	return i;
}



